{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["constructor","props","super","this","degrees","percentage","roundedPercentage","maxHits","totalHits","style","getStyles","container","overflow","padding","display","flexDirection","position","background","borderRadius","minHeight","maxHeight","wrapper","width","bottomLayer","top","left","height","zIndex","colorLayer","transformOrigin","transitionTimingFunction","transitionProperty","transitionDuration","duration","coverLayer","bottom","transform","bottomCoverLayer","right","margin","seperator","coverBackgroundColor","fontSize","textAlign","cursor","detailsContainer","flex","justifyContent","alignItems","paddingTop","labelText","color","labelNumber","fontWeight","refresh","strengthMode","Math","componentDidMount","arrayOfnumbersToAnimate","element","refs","state","previous","current","shouldComponentUpdate","nextProps","nextState","conditionalProps","i","conditionalState","componentDidUpdate","prevProps","componentWillUnmount","initElementsOfNumbers","obj","Date","animateNumbers","array","step","timestamp","span","timespan","positionInTime","progress","window","myReq","renderSlices","arrayOfSlices","key","renderPercentage","data-auto","percentageStyle","title","ref","renderInfo","infoContainerStyle","infoNumbersStyle","infoTextStyle","render","QueryMeter","thickness","slices","sliceGap","containerBackgroundColor","fillColor","fillBackgroundColor","containerSpacing","showInfo","showPercentage","topText","bottomText","firstAnimationDelay","App","Component","isStrengthMode","randomizeResults","_this","floor","random","setState","name","type","checked","onChange","e","htmlFor","transitionTiming","onClick","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0f297bad.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass QueryMeter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      degrees: 0,\n      percentage: 0,\n      roundedPercentage: 0,\n      maxHits: 0,\n      totalHits: 0,\n      style: this.getStyles(this.props)\n    };\n  }\n\n  getStyles(props) {\n    let styles = {\n      container: {\n        overflow: \"hidden\",\n        padding: props.containerSpacing || 0,\n        display: \"inline-flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        background: props.containerBackgroundColor,\n        borderRadius: `${props.width * 2}px ${props.width * 2}px 0 0`,\n        minHeight: !props.showPercentage ? `${props.width / 2 - props.containerSpacing}px` : `${props.width / 2}px`,\n        maxHeight: !props.showPercentage ? `${props.width / 2 - props.containerSpacing}px` : `${props.width / 2}px`\n      },\n      wrapper: {\n        width: props.width,\n        minHeight: props.width / 2,\n        maxHeight: props.width / 2,\n        position: \"relative\",\n        borderRadius: `${props.width * 2}px ${props.width * 2}px 0 0`\n      },\n      bottomLayer: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        background: props.fillBackgroundColor,\n        borderRadius: `${props.width * 2}px ${props.width * 2}px 0 0`,\n        width: props.width,\n        height: props.width / 2,\n        zIndex: 1\n      },\n      colorLayer: {\n        position: \"absolute\",\n        top: props.width / 2,\n        left: 0,\n        background: props.fillColor,\n        borderRadius: `0 0 ${props.width * 2}px ${props.width * 2}px`,\n        width: props.width,\n        height: props.width / 2,\n        zIndex: 2,\n        transformOrigin: \"50% 0%\",\n        transitionTimingFunction: props.transitionTiming,\n        transitionProperty: \"all\",\n        transitionDuration: `${props.duration}ms`\n      },\n      coverLayer: {\n        position: \"absolute\",\n        bottom: 0,\n        left: \"50%\",\n        background: props.coverBackgroundColor,\n        borderRadius: `${props.width * 2}px ${props.width * 2}px 0 0`,\n        width: props.width - props.thickness * 2,\n        height: props.width / 2 - props.thickness,\n        transform: \"translate(-50%, 0)\",\n        zIndex: 4\n      },\n      bottomCoverLayer: {\n        height: props.containerSpacing,\n        background: props.containerBackgroundColor,\n        position: \"absolute\",\n        bottom: 0,\n        left: 0,\n        right: 0,\n        margin: `0 ${props.containerSpacing}px`,\n        zIndex: 2,\n        display: props.showPercentage ? \"block\" : \"none\"\n      },\n      seperator: {\n        position: \"absolute\",\n        bottom: 0 - props.sliceGap / 2,\n        left: \"-2px\",\n        width: 2 + props.width / 2,\n        height: props.sliceGap,\n        zIndex: 3,\n        overflow: \"hidden\",\n        transformOrigin: \"100% 50% 0px\",\n        background: props.coverBackgroundColor\n      },\n      percentage: {\n        transform: \"rotate(-90deg)\",\n        position: \"absolute\",\n        top: 0,\n        width: 40,\n        left: -36,\n        fontSize: 12,\n        textAlign: \"center\",\n        transformOrigin: \"50% 0% 0px\",\n        cursor: \"default\"\n      },\n      detailsContainer: {\n        flex: 1,\n        height: \"100%\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        display: \"flex\",\n        fontSize: 12,\n        paddingTop: 7\n      },\n      labelText: {\n        fontSize: 13,\n        color: \"#4e4e4e\"\n      },\n      labelNumber: {\n        fontWeight: 800,\n        fontSize: 13,\n        color: \"#4e4e4e\"\n      }\n    };\n\n    return styles;\n  }\n\n  refresh(props) {\n    if (this.isUnmounted) return;\n    let style = this.getStyles(props);\n    let maxHits = props.maxHits;\n    let strengthMode = props.strengthMode;\n    let totalHits = props.totalHits || 0;\n    let percentage =\n      totalHits === 1\n        ? 100\n        : totalHits === 0\n        ? 0\n        : strengthMode\n        ? 100 - (totalHits / maxHits) * 100\n        : (totalHits / maxHits) * 100;\n    if (percentage < 0 || !percentage) percentage = 0;\n    let roundedPercentage = Math.floor(percentage);\n    if (props.getPercentage) props.getPercentage(roundedPercentage);\n    let degrees = (180 * roundedPercentage) / 100;\n\n    this.setState({\n      percentage,\n      roundedPercentage,\n      degrees,\n      maxHits,\n      totalHits,\n      style\n    });\n  }\n\n  componentDidMount() {\n    let arrayOfnumbersToAnimate = [];\n    if (this.props.showInfo) {\n      arrayOfnumbersToAnimate.push(\n        {\n          element: this.refs.totalHits,\n          state: \"totalHits\",\n          previous: 0,\n          current: 0\n        },\n        {\n          element: this.refs.maxHits,\n          state: \"maxHits\",\n          previous: 0,\n          current: 0\n        }\n      );\n    }\n    if (this.props.showPercentage) {\n      arrayOfnumbersToAnimate.push({\n        element: this.refs.percentage,\n        state: \"percentage\",\n        previous: 0,\n        current: 0\n      });\n    }\n\n    this.initElementsOfNumbers(arrayOfnumbersToAnimate);\n\n    // setTimeout(() => {\n      this.refresh(this.props);\n      this.animateNumbers(arrayOfnumbersToAnimate);\n    // }, this.props.firstAnimationDelay);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let conditionalProps = [\"topText\", \"bottomText\"];\n    for (let i = 0; i < conditionalProps.length; i++) {\n      if (this.props[conditionalProps[i]] !== nextProps[conditionalProps[i]])\n        return true;\n    }\n\n    let conditionalState = [\"maxHits\", \"totalHits\", \"degrees\"];\n    for (let i = 0; i < conditionalState.length; i++) {\n      if (nextProps[conditionalState[i]] !== nextState[conditionalState[i]])\n        return true;\n    }\n    return false;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.refresh(this.props);\n    }\n  }\n\n  componentWillUnmount() {\n    this.isUnmounted = true;\n  }\n\n  initElementsOfNumbers(arrayOfnumbersToAnimate) {\n    // initialize the objects to animate\n    arrayOfnumbersToAnimate.forEach(obj => {\n      obj.element.innerHTML = obj.current.toLocaleString();\n      obj.next = this.state[obj.state];\n      obj.startTime = Date.now();\n    });\n  }\n\n  animateNumbers(array) {\n    var myReq;\n    var progress = Date.now();\n    let step = (timestamp) => {\n      array.forEach(obj => {\n        // the target has changed\n        if (obj.next !== this.state[obj.state]) {\n          // the new target is the same as the previous origin\n          if (obj.previous === this.state[obj.state]) {\n            // calculate and use the time that passed (to mimic the way \"transform\" works)\n            var span = obj.next - obj.previous; // the total range\n            var position = span ? (obj.next - obj.current || span) / span : 0; // the fraction of the progress\n            obj.startTime = Date.now() - this.props.duration * position;\n\n            obj.previous = obj.next;\n            obj.next = this.state[obj.state];\n          }\n\n          // the new target is different than the previous origin,\n          else {\n            // use the current duration\n            obj.startTime = Date.now();\n\n            obj.previous = obj.current;\n            obj.next = this.state[obj.state];\n          }\n        }\n\n        // the target has not changed\n        if (obj.current == obj.next) {\n          // reset variables and return\n          obj.startTime = Date.now();\n          obj.previous = obj.next;\n          return;\n        }\n\n        // calculate the current value\n        var timespan = Date.now() - obj.startTime; // the time that passed\n        var positionInTime = Math.min(\n          timespan / (this.props.duration || timespan),\n          1\n        ); // the fraction of the progress in time units\n        var progress = (obj.next - obj.previous) * positionInTime; // the progress\n        obj.current = obj.previous + progress; // the current value\n        obj.element.innerHTML = Math.round(obj.current).toLocaleString();\n      });\n\n      myReq = window.requestAnimationFrame(step);\n    };\n    myReq = window.requestAnimationFrame(step);\n  }\n\n  renderSlices() {\n    let arrayOfSlices = [];\n\n    for (let i = 1; i < this.props.slices; i++) {\n      arrayOfSlices.push(\n        <div\n          key={i}\n          style={{\n            ...this.state.style.seperator,\n            transform: `rotate(${(180 / this.props.slices) * i}deg)`\n          }}\n        />\n      );\n    }\n\n    return arrayOfSlices;\n  }\n\n  renderPercentage() {\n    if (!this.props.showPercentage) return;\n    return (\n      <div\n        data-auto=\"percentage\"\n        style={{\n          ...this.state.style.percentage,\n          ...this.props.percentageStyle\n        }}\n        title={this.state.percentage + \"%\"}\n      >\n        <span ref=\"percentage\" />%\n      </div>\n    );\n  }\n\n  renderInfo() {\n    if (!this.props.showInfo) return;\n    return (\n        <div style={{\n          ...this.state.style.detailsContainer,\n          ...this.props.infoContainerStyle\n        }}>\n            <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n                <span\n                    data-auto=\"selected-entity-type\"\n                    style={{\n                    ...this.state.style.labelText,\n                    ...this.props.infoTextStyle,\n                    textAlign: \"center\"\n                    }}\n                >\n                    {this.props.topText}\n                </span>\n                <span\n                    data-auto=\"hits\"\n                    ref=\"totalHits\"\n                    style={{\n                    ...this.state.style.labelNumber,\n                    ...this.props.infoNumbersStyle\n                    }}\n                />\n                </div>\n                <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n                <span\n                    style={{\n                    ...this.state.style.labelText,\n                    ...this.props.infoTextStyle\n                    }}\n                >\n                    {this.props.bottomText}\n                </span>\n                <span\n                    data-auto=\"all-from-type\"\n                    ref=\"maxHits\"\n                    style={{\n                    ...this.state.style.labelNumber,\n                    ...this.props.infoNumbersStyle\n                    }}\n                />\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n        <div style={this.state.style.container}>\n            <div style={this.state.style.wrapper}>\n            <div style={this.state.style.bottomLayer} />\n            <div\n                style={{\n                ...this.state.style.colorLayer,\n                transform: `rotate(${this.state.degrees}deg)`\n                }}\n            >\n                {this.renderPercentage()}\n            </div>\n            <div style={this.state.style.coverLayer}>{this.renderInfo()}</div>\n                <div>{this.renderSlices()}</div>\n            </div>\n            <div style={this.state.style.bottomCoverLayer} />\n        </div>\n    );\n  }\n}\n\nQueryMeter.defaultProps = {\n  width: 200,\n  thickness: 25,\n  slices: 6,\n  sliceGap: 2,\n  duration: 1000,\n  transitionTimingFunction: \"ease-in-out\",\n  coverBackgroundColor: \"#fff\",\n  containerBackgroundColor: \"#fff\",\n  fillColor:\n    \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\",\n  fillBackgroundColor: \"#eee\",\n  containerSpacing: 20,\n  strengthMode: true,\n  percentageStyle: {},\n  infoNumbersStyle: {},\n  infoTextStyle: {},\n  showInfo: true,\n  showPercentage: true,\n  topText: \"Total Hits: \",\n  bottomText: \"Max Hits: \",\n  firstAnimationDelay: 0,\n  totalHits: 400,\n  maxHits: 1000\n};\n\nexport default QueryMeter;","import React, { Component } from 'react'\n\nimport QueryMeter from 'react-query-meter'\nimport 'react-query-meter/dist/index.css'\n\nclass App extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          isStrengthMode: true,\n          totalHits: 0,\n          maxHits: 0\n      };\n  }\n\n  randomizeResults(_this) {\n      let maxHits = Math.floor(Math.random() * 10001);\n      let totalHits = Math.floor(Math.random() * maxHits);\n      _this.setState({ totalHits, maxHits });\n  }\n\n  render() {\n      const { totalHits, maxHits, isStrengthMode } = this.state;\n  \n      return (\n          <div style={{ display: \"inline-flex\", flexDirection: \"column\" }}>\n              <div style={{display: 'flex', alignItems: 'center', fontSize: 14}}>\n                  <input name=\"strengthMode\" type=\"checkbox\" checked={isStrengthMode} onChange={e => this.setState({isStrengthMode: !isStrengthMode})} />\n                  <label htmlFor=\"strengthMode\">Strength Mode</label>\n              </div>\n              <QueryMeter\n                  totalHits={totalHits}\n                  maxHits={maxHits}\n                  width={200}\n                  thickness={25}\n                  slices={6}\n                  sliceGap={3}\n                  duration={1000}\n                  transitionTiming=\"cubic-bezier(.17,.67,.83,.67)\"\n                  coverBackgroundColor=\"#fff\"\n                  containerBackgroundColor=\"#fff\"\n                  fillColor=\"linear-gradient(315deg, #fff000 0%, #ed008c 74%)\"\n                  fillBackgroundColor=\"#eee\"\n                  containerSpacing={20}\n                  strengthMode={isStrengthMode}\n                  percentageStyle={{}}\n                  infoNumbersStyle={{}}\n                  infoTextStyle={{}}\n                  showInfo={true}\n                  showPercentage={true}\n                  topText=\"Total Hits:&nbsp;\"\n                  bottomText=\"Max Hits:&nbsp;\"\n              />\n              <button onClick={e => this.randomizeResults(this)}>RANDOMIZE</button>\n          </div>\n      );\n  }\n}\n\nexport default App","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}